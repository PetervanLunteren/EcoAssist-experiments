name: build and attach macOS ARM release

on:
  release:
    types:
      - published

jobs:
  build-and-zip:
    runs-on: macos-15

    env:
      RELEASE_VERSION: ${{ github.event.release.tag_name }}
      BUCKET_NAME: github-release-files-storage
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Miniconda
        run: |
          mkdir "$HOME/miniforge"
          curl -L "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-MacOSX-arm64.sh" -o miniforge.sh
          bash miniforge.sh -b -u -p "$HOME/miniforge"
          echo "succesfully installed at $HOME/miniforge"
      
      - name: Run installation script
        run: |
          chmod +x ./shell/install-osx-arm.sh
          ./shell/install-osx-arm.sh

      - name: Zip folder contents
        run: |
          cd "$HOME"
          zip -r "osx-arm-${{ env.RELEASE_VERSION }}.zip" "EcoAssist ${{ env.RELEASE_VERSION }}"

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_STORAGE_UPLOAD_KEY }}
  
      - name: Set up Google Cloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: github-file-storage
  
      - name: Upload files to Google Cloud
        run: |
          # init vars
          BUCKET_NAME="${{ env.BUCKET_NAME }}"
          PINNED_FOLDER_NAME="${{ env.RELEASE_VERSION }}"
          LATEST_FOLDER_NAME="latest"
          PINNED_FILE_NAME="osx-arm-${{ env.RELEASE_VERSION }}.zip"
          LATEST_FILE_NAME="osx-arm-latest.zip"

          # release pinned version
          echo "Uploading $PINNED_FILE_NAME to /$PINNED_FOLDER_NAME/ in bucket $BUCKET_NAME"                                         # log
          gsutil -q stat gs://$BUCKET_NAME/$PINNED_FOLDER_NAME/ || gsutil cp /dev/null gs://$BUCKET_NAME/$PINNED_FOLDER_NAME/        # create folder
          gsutil cp -r $PINNED_FILE_NAME gs://$BUCKET_NAME/$PINNED_FOLDER_NAME/$PINNED_FILE_NAME                                     # upload file
          echo "Uploaded $PINNED_FILE_NAME to GCS at gs://$BUCKET_NAME/$PINNED_FOLDER_NAME/$PINNED_FILE_NAME"                        # log
          echo "File is publicly accessible at: https://storage.googleapis.com/$BUCKET_NAME/$PINNED_FOLDER_NAME/$PINNED_FILE_NAME"   # url

          # latest release version
          echo "Uploading $LATEST_FILE_NAME to /$LATEST_FOLDER_NAME/ in bucket $BUCKET_NAME"                                         # log
          gsutil -q stat gs://$BUCKET_NAME/$LATEST_FOLDER_NAME/ || gsutil cp /dev/null gs://$BUCKET_NAME/$LATEST_FOLDER_NAME/        # create folder 
          gsutil cp -r $PINNED_FILE_NAME gs://$BUCKET_NAME/$LATEST_FOLDER_NAME/$LATEST_FILE_NAME                                     # upload file
          echo "Uploaded $LATEST_FILE_NAME to GCS at gs://$BUCKET_NAME/$LATEST_FOLDER_NAME/$LATEST_FILE_NAME"                        # log
          echo "File is publicly accessible at: https://storage.googleapis.com/$BUCKET_NAME/$LATEST_FOLDER_NAME/$LATEST_FILE_NAME"   # url
  
      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
  
      - name: Get the release body
        id: get_release
        run: |
          release=$(gh release view ${{ github.ref_name }} --json body -q .body)
          echo "$release" > release_body.txt
  
      - name: Append link to release body
        id: append_link
        run: |
          new_body="$(cat release_body.txt)
          - Install for **macOS** (Apple Silicon - M1, M2, M3, etc.): [osx-arm-${{ env.RELEASE_VERSION }}.zip](https://storage.googleapis.com/${{ env.BUCKET_NAME }}/${{ env.RELEASE_VERSION }}/osx-arm-${{ env.RELEASE_VERSION }}.zip)"
          echo "$new_body" > new_release_body.txt
  
      - name: Update the release body
        run: |
          gh release edit ${{ github.ref_name }} --notes "$(cat new_release_body.txt)"
